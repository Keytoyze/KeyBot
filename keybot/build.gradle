import java.util.function.Consumer
import java.nio.file.Path

plugins {
    id 'kotlin'
}

dependencies {
    compile "net.mamoe:mirai-core:$miraiCoreVersion"
    compile "net.mamoe:mirai-core-qqandroid:$miraiCoreVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "org.xerial:sqlite-jdbc:$sqliteVersion"
}

tasks.withType(Jar.class) { jarTask ->
    println("buildDir: " + jarTask.project.buildDir)
    println("rootDir: " + jarTask.project.rootDir)
    println("projectDir: " + jarTask.project.projectDir)
    println("temporaryDir: " + jarTask.temporaryDir)
    jarTask.manifest {
        attributes 'Main-Class': "indi.key.keybot.MainKt"
    }
    // Add this
    jarTask.from({
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    jarTask.project.copy {
        from Path.of(jarTask.project.rootDir.path, repositoryPath, 'user.json')
        from Path.of(jarTask.project.rootDir.path, repositoryPath, 'device.json')
        into Path.of(jarTask.project.buildDir.path, 'libs')
    }
}

task processImage(type: Exec) { task ->

    def out = new ByteArrayOutputStream()
    exec {
        commandLine 'python',  '--version'
        errorOutput = out
    }
    def pythonName = 'python'
    def pythonVersionTestResult = out.toString().trim()
    println("Python version test: " + pythonVersionTestResult)
    if (pythonVersionTestResult.contains("Python 2")) {
        pythonName = "python3"
    }

    workingDir task.project.projectDir
    commandLine pythonName, 'process_img.py',
            Path.of(task.project.rootDir.path, repositoryPath, 'problem-set'),
            Path.of(task.project.buildDir.path, 'libs', 'repository')
}

task runBot(type: Exec) { task ->
    workingDir Path.of(task.project.buildDir.path, 'libs')
    commandLine 'java', '-jar', 'keybot.jar'
}

runBot.dependsOn jar
jar.dependsOn processImage
